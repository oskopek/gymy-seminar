/*
 * Copyright 2014 Ondrej Skopek
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sk.gymy.seminar.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import sk.gymy.seminar.domain.Seminar;
import sk.gymy.seminar.domain.Group;
import sk.gymy.seminar.domain.Student;
import sk.gymy.seminar.domain.Teacher;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "TeacherTwiceInGroup"
    when
        $teacher : Teacher()
        $seminarLeft : Seminar($leftId : id, $group : group, $teacher == teacher)
        $seminarRight : Seminar(id > $leftId, group == $group, $teacher == teacher)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "studentsPickedEnforcedSeminarCount" // TODO: Probably can eliminate this rule
    when
        $student : Student()
        $enforcedSeminarCount : Integer()
        $seminarCount : Number (intValue != $enforcedSeminarCount)
                        from accumulate(Seminar(students.contains($student)), count(1))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "StudentTwiceInGroup"
    when
        $student : Student()
        $seminarLeft : Seminar($leftId : id, $group : group, students.contains($student))
        $seminarRight : Seminar(id > $leftId, group == $group, students.contains($student))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1);
end
